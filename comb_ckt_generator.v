//============================================================================
// comb_ckt_generator.v
//
// This code is generated by Terasic System Builder
// and modified by M. Hildebrand and B. Baas
//
// 2018/02/05 First version
// 2018/04/24 Routed all board-level switches and LEDs to and from this module
//============================================================================

module comb_ckt_generator (
   v_sync,
   clock,
   // VGA-related signals
   col,
   row,
   red,
   green,
   blue,
   // input push buttons and switches
   KEY,
   SW
   );

input v_sync;
input clock;
input  [9:0]  col;
input  [8:0]  row;
output [3:0]  red;    // 4-bit color output
output [3:0]  green;  // 4-bit color output
output [3:0]  blue;   // 4-bit color output

// input push buttons and switches
input  [1:0]  KEY;    // two board-level push buttons KEY1 - KEY0
 input [9:0]  SW;     // ten board-level switches SW9 - SW0




//============================================================================
//  reg/wire declarations
//============================================================================
// More complex implementations will likely declare RGB outputs as regs
// rather than wires

reg [9:0] SW_output;
reg [3:0]    red, green, blue, red_c, blue_c, green_c;    

wire clock;

//============================================================================
// Board-LED related circuits
//============================================================================

// Temporary simple logic
// The 10 LEDs will light depending on the position of the adjacent 10 switches

wire [3:0] red0_out, red1_out, red2_out, red3_out;
wire [3:0] green0_out, green1_out, green2_out, green3_out;
wire [3:0] blue0_out, blue1_out, blue2_out, blue3_out;

reg [6:0] red_mult, green_mult, blue_mult;

reg [3:0] luma_n, luma, luma_n_c; 

reg [11:0] pixel_buffer_c, pixel_buffer;
reg [12:0] address, address1, address2, address3, address_c, address1_c, address2_c, address3_c;

reg [4:0] state, state_c, statex, statex_c;

reg [5:0] luma_c;

parameter S0 = 5'b0;
parameter S1 = 5'd1;
parameter S2 = 5'd2;
parameter S3 = 5'd3;
parameter S4 = 5'd4;
parameter S5 = 5'd5;
parameter S6 = 5'd6;
parameter S7 = 5'd7;
parameter S8 = 5'd8;
parameter S9 = 5'd9;

reg [2:0] mag;

always @ (posedge v_sync) begin
   SW_output <= #1 SW;
end // always @ (posedge v_sync)


rom_0r out0 (clock, address, red0_out);
rom_0b out1 (clock, address, blue0_out);
rom_0g out2 (clock, address, green0_out);

rom_1r out0a (clock, address1, red1_out);
rom_1g out1a (clock, address1, green1_out);
rom_1b out2a (clock, address1, blue1_out);

rom_2r out0b (clock, address2, red2_out);
rom_2g out1b (clock, address2, green2_out);
rom_2b out2b (clock, address2, blue2_out);


rom_3r out0c (clock, address3, red3_out);
rom_3g out1c (clock, address3, green3_out);
rom_3b out2c (clock, address3, blue3_out);

always @ (posedge clock) begin
   address <= #1 address_c;
   address1 <= #1 address1_c;
   address2 <= #1 address2_c;
   address3 <= #1 address3_c;
   pixel_buffer <= #1 pixel_buffer_c;
   state <= #1 state_c;
   statex <= #1 statex_c;
   blue <= #1 blue_c;

   green <= #1 green_c;
   red <= #1 red_c;
   luma <= #1 luma_c;

   luma_n <= #1 luma_n_c;
end


always@(*) begin
   SW_output = SW;
   address_c = address; 
   address1_c = address1; 
   address2_c = address2; 
   address3_c = address3;
   state_c = state; 
   red_c = red;
   blue_c = blue;
   green_c = green;
   luma_c = luma;

   red_c = 4'b0000;
   blue_c = 4'b0000;
   green_c = 4'b0000;
    luma_c = luma;
   luma_n_c = luma_n;


   pixel_buffer_c = pixel_buffer;

   
   

      if (SW_output[9:8] == 2'b00) begin
            //mag = 2'd1;
            //pixel_buffer_c = {red0_out, blue0_out, green0_out}; 
            if(row <= 9'd31 && col <= 9'd127) begin
               pixel_buffer_c = {red0_out, blue0_out, green0_out}; 
               address_c = (row)*9'd128 + col;
         
               {red_c, blue_c, green_c} = pixel_buffer;
                   
            end 
            else if((row >= 9'd32 && row <= 9'd63) && (col <= 9'd127)) begin
               pixel_buffer_c = {red1_out, blue1_out, green1_out};
               address1_c = (row*9'd128) + col - 13'd4096;
               {red_c, blue_c, green_c} = pixel_buffer;
                
            end
            else if((row >= 9'd64 && row <= 9'd95) && (col <= 9'd127)) begin 
               pixel_buffer_c = {red2_out, blue2_out, green2_out};   
               address2_c = (row*9'd128) + (col) - (13'd4096*13'd2);
               {red_c, blue_c, green_c} = pixel_buffer;
            end 
            else if((row >= 9'd96 && row <= 9'd127) && ( col <= 9'd127)) begin
               pixel_buffer_c = {red3_out, blue3_out, green3_out};
               address3_c = (row*9'd128) + col - (13'd4096*13'd3);
               {red_c, blue_c, green_c} = pixel_buffer;
            end 
            else begin 
               red_c = 4'b0000;
               green_c = 4'b0000;
               blue_c = 4'b0000;
            end 
      end
      if (SW_output[9:8] == 2'b01) begin
         mag = 3'd02;
         if(row <= 9'd63 && col <= 9'd255) begin
            pixel_buffer_c = {red0_out, blue0_out, green0_out}; 

            if (((col%mag) != 9'd0)) begin // (0,0)
               {red_c, blue_c, green_c} = pixel_buffer;
            end // if ((row == 9'd0) && (col == 9'b0))
            else if (((row%mag) == 9'b0)  || ((col%mag) == 9'd0)) begin 
               address_c = (((row-(row%mag))/mag)*9'd128) + ((col-(col%mag))/mag); 
               {red_c, blue_c, green_c} = pixel_buffer;
            end 
         end

         else if((row >= 9'd64 && row <= 9'd127) && (col <= 9'd255)) begin 
            pixel_buffer_c = {red1_out, blue1_out, green1_out}; 
            if (((col%mag) != 9'd0)) begin // (0,0)
               {red_c, blue_c, green_c} = pixel_buffer;
            end // if ((row == 9'd0) && (col == 9'b0))
            else if (((row%mag) == 9'b0)  || ((col%mag) == 9'd0)) begin 
               address1_c = ((((row-(row%mag))/mag)*9'd128) + ((col-(col%mag))/mag)) - 13'd4096;
               {red_c, blue_c, green_c} = pixel_buffer;
            end 
         end 
         else if((row >= 9'd128 && row <= 9'd191) && (col <= 9'd255)) begin
            pixel_buffer_c = {red2_out, blue2_out, green2_out};  
            if (((col%mag) != 9'd0)) begin // (0,0)
               {red_c, blue_c, green_c} = pixel_buffer;
            end // if ((row == 9'd0) && (col == 9'b0))
            else if (((row%mag) == 9'b0)  || ((col%mag) == 9'd0)) begin 
               address2_c = ((((row-(row%mag))/mag)*9'd128) + ((col-(col%mag))/mag)) - (13'd4096*13'd2);
               {red_c, blue_c, green_c} = pixel_buffer;
            end 

         end 
         else if((row >= 9'd192 && row <= 9'd255) && (col <= 9'd255)) begin
            pixel_buffer_c = {red3_out, blue3_out, green3_out}; 
           if (((col%mag) != 9'd0)) begin // (0,0)
               {red_c, blue_c, green_c} = pixel_buffer;
            end // if ((row == 9'd0) && (col == 9'b0))
            else if (((row%mag) == 9'b0)  || ((col%mag) == 9'd0)) begin 
               address3_c = ((((row-(row%mag))/mag)*9'd128) + ((col-(col%mag))/mag)) - (13'd4096*13'd3);
               {red_c, blue_c, green_c} = pixel_buffer;
            end 
         end 
         else begin 
            red_c = 4'b0000;
            green_c = 4'b0000;
            blue_c = 4'b0000;
         end
     end // S1:

      if (SW_output[9:8] == 2'b10) begin
         mag = 3'd03;
         if(row <= 9'd95 && col <= 9'd383) begin
            pixel_buffer_c = {red0_out, blue0_out, green0_out}; 
            if (((col%mag) != 9'd0)) begin // (0,0)
               {red_c, blue_c, green_c} = pixel_buffer;
            end // if ((row == 9'd0) && (col == 9'b0))
            else if (((row%mag) == 9'b0)  || ((col%mag) == 9'd0)) begin 
               address_c = (((row-(row%mag))/mag)*9'd128) + ((col-(col%mag))/mag); 
               {red_c, blue_c, green_c} = pixel_buffer;
				end
         end

         else if((row >= 9'd96 && row <= 9'd191) && (col <= 9'd383)) begin 
            pixel_buffer_c = {red1_out, blue1_out, green1_out}; 
            if (((col%mag) != 9'd0)) begin // (0,0)
               {red_c, blue_c, green_c} = pixel_buffer;
            end // if ((row == 9'd0) && (col == 9'b0))
            else if (((row%mag) == 9'b0)  || ((col%mag) == 9'd0)) begin 
               address1_c = ((((row-(row%mag))/mag)*9'd128) + ((col-(col%mag))/mag)) - 13'd4096;
               {red_c, blue_c, green_c} = pixel_buffer;
            end 

         end 
         else if((row >= 9'd192 && row <= 9'd287) && (col <= 9'd383)) begin
            pixel_buffer_c = {red2_out, blue2_out, green2_out};  
            if (((col%mag) != 9'd0)) begin // (0,0)
               {red_c, blue_c, green_c} = pixel_buffer;
            end // if ((row == 9'd0) && (col == 9'b0))
            else if (((row%mag) == 9'b0)  || ((col%mag) == 9'd0)) begin 
               address2_c = ((((row-(row%mag))/mag)*9'd128) + ((col-(col%mag))/mag)) - (13'd4096*13'd2);
               {red_c, blue_c, green_c} = pixel_buffer;
            end 

         end 
         else if((row >= 9'd288 && row <= 9'd383) && (col <= 9'd383)) begin
            pixel_buffer_c = {red3_out, blue3_out, green3_out}; 
           if (((col%mag) != 9'd0)) begin // (0,0)
               {red_c, blue_c, green_c} = pixel_buffer;
            end // if ((row == 9'd0) && (col == 9'b0))
            else if (((row%mag) == 9'b0)  || ((col%mag) == 9'd0)) begin 
               address3_c = ((((row-(row%mag))/mag)*9'd128) + ((col-(col%mag))/mag)) - (13'd4096*13'd3);
               {red_c, blue_c, green_c} = pixel_buffer;
            end 
         end 
         else begin 
            red_c = 4'b0000;
            green_c = 4'b0000;
            blue_c = 4'b0000;
         end
      end // S1:
      if (SW_output[9:8] == 2'b11) begin
         mag = 3'd04;
         if(row <= 9'd127 && col <= 9'd479) begin
            pixel_buffer_c = {red0_out, blue0_out, green0_out}; 
            if (((col%mag) != 9'd0)) begin // (0,0)
               {red_c, blue_c, green_c} = pixel_buffer;
            end // if ((row == 9'd0) && (col == 9'b0))
             if (((row%mag) == 9'b0)  || ((col%mag) == 9'd0)) begin 
               address_c = ((row/mag)*15'd128) + ((col)/mag); 
               {red_c, blue_c, green_c} = pixel_buffer;
				end
         end

         else if((row >= 9'd128 && row <= 9'd255) && (col <= 9'd479)) begin 
            pixel_buffer_c = {red1_out, blue1_out, green1_out}; 
            if (((col%mag) != 9'd0)) begin // (0,0)
               {red_c, blue_c, green_c} = pixel_buffer;
            end // if ((row == 9'd0) && (col == 9'b0))
             if (((row%mag) == 9'b0)  || ((col%mag) == 9'd0)) begin 
               address1_c = ((((row)/mag)*15'd128) + ((col)/mag)) - 15'd4096;
               {red_c, blue_c, green_c} = pixel_buffer;
            end 
            
         end 
         else if((row >= 9'd256 && row <= 9'd383) && (col <= 9'd479)) begin
            pixel_buffer_c = {red2_out, blue2_out, green2_out};  
            if (((col%mag) != 9'd0)) begin // (0,0)
               {red_c, blue_c, green_c} = pixel_buffer;
            end // if ((row == 9'd0) && (col == 9'b0))
             if (((row%mag) == 9'b0)  || ((col%mag) == 9'd0)) begin 
               address2_c = ((((row)/mag)*15'd128) + ((col)/mag)) - (15'd4096*15'd2);
               {red_c, blue_c, green_c} = pixel_buffer;
            end 

         end 
         else if((row >= 9'd384 && row <= 9'd511) && (col <= 9'd479)) begin
            pixel_buffer_c = {red3_out, blue3_out, green3_out}; 
           if (((col%mag) != 9'd0)) begin // (0,0)
               {red_c, blue_c, green_c} = pixel_buffer;
            end // if ((row == 9'd0) && (col == 9'b0))
             if (((row%mag) == 9'b0)  || ((col%mag) == 9'd0)) begin 
               address3_c = ((((row)/mag)*15'd128)) + ((col)/mag) - (15'd4096*15'd3);
               {red_c, blue_c, green_c} = pixel_buffer;
            end 
         end 
         else begin 
            red_c = 4'b0000;
            green_c = 4'b0000;
            blue_c = 4'b0000;
         end
      end // S3:'
      

      if (SW_output[4]) begin
         mag = SW[9:8] + 1'b1;
         if(row < (9'd32*(SW[9:8]+1'b1)) && col <= (9'd127*(SW[9:8]+1'b1))) begin
            pixel_buffer_c = {red0_out, blue0_out, green0_out}; 
            if (((col%mag) != 9'd0)) begin // (0,0)
               red_c = red0_out*2126/10000 + green0_out*7152/10000 + blue0_out*722/100000;
               blue_c = red0_out*2126/10000 + green0_out*7152/10000 + blue0_out*722/100000;
               green_c = red0_out*2126/10000 + green0_out*7152/10000 + blue0_out*722/10000;
            end // if ((row == 9'd0) && (col == 9'b0))
            else if (((row%mag) == 9'b0)  || ((col%mag) == 9'd0)) begin 
               address_c = (((row-(row%mag))/mag)*9'd128) + ((col-(col%mag))/mag); 
               red_c = red0_out*2126/10000 + green0_out*7152/10000 + blue0_out*722/100000;
               blue_c = red0_out*2126/10000 + green0_out*7152/10000 + blue0_out*722/100000;
               green_c = red0_out*2126/10000 + green0_out*7152/10000 + blue0_out*722/10000;
            end
         end

         else if((row >= (9'd32*(SW[9:8]+1'b1)) && row < (9'd64*(SW[9:8]+1'b1))) && (col <= (9'd127*(SW[9:8]+1'b1)))) begin 
            pixel_buffer_c = {red1_out, blue1_out, green1_out}; 
            if (((col%mag) != 9'd0)) begin // (0,0)
               red_c = red1_out*2126/10000 + green1_out*7152/10000 + blue1_out*722/100000;
               blue_c = red1_out*2126/10000 + green1_out*7152/10000 + blue1_out*722/100000;
               green_c = red1_out*2126/10000 + green1_out*7152/10000 + blue1_out*722/10000;
            end // if ((row == 9'd0) && (col == 9'b0))
            else if (((row%mag) == 9'b0)  || ((col%mag) == 9'd0)) begin 
               address1_c = ((((row-(row%mag))/mag)*9'd128) + ((col-(col%mag))/mag)) - 13'd4096;
               red_c = red1_out*2126/10000 + green1_out*7152/10000 + blue1_out*722/10000;
               blue_c = red1_out*2126/10000 + green1_out*7152/10000 + blue1_out*722/10000;
               green_c = red1_out*2126/10000 + green1_out*7152/10000 + blue1_out*722/10000;
            end 

         end 
         else if((row >= (9'd64*(SW[9:8]+1'b1)) && row < (9'd96*(SW[9:8]+1'b1))) && (col <= (9'd127*(SW[9:8]+1'b1)))) begin
            pixel_buffer_c = {red2_out, blue2_out, green2_out};  
            if (((col%mag) != 9'd0)) begin // (0,0)
               red_c = red2_out*2126/10000 + green2_out*7152/10000 + blue2_out*722/10000;
               blue_c = red2_out*2126/10000 + green2_out*7152/10000 + blue2_out*722/10000;
               green_c = red2_out*2126/10000 + green2_out*7152/10000 + blue2_out*722/10000;
            end // if ((row == 9'd0) && (col == 9'b0))
            else if (((row%mag) == 9'b0)  || ((col%mag) == 9'd0)) begin 
               address2_c = ((((row-(row%mag))/mag)*9'd128) + ((col-(col%mag))/mag)) - (13'd4096*13'd2);
               red_c = red2_out*2126/10000 + green2_out*7152/10000 + blue2_out*722/10000;
               blue_c = red2_out*2126/10000 + green2_out*7152/10000 + blue2_out*722/10000;
               green_c = red2_out*2126/10000 + green2_out*7152/10000 + blue2_out*722/10000;
            end 

         end 
         else if((row >= 9'd96*(SW[9:8]+1'b1)) && row <= 9'd127*(SW[9:8]+1'b1) && (col <= 9'd127*(SW[9:8]+1'b1))) begin
            pixel_buffer_c = {red3_out, blue3_out, green3_out}; 
           if (((col%mag) != 9'd0)) begin // (0,0)
               red_c = red3_out*2126/10000 + green3_out*7152/10000 + blue3_out*722/10000;
               blue_c = red3_out*2126/10000 + green3_out*7152/10000 + blue3_out*722/10000;
               green_c = red3_out*2126/10000 + green3_out*7152/10000 + blue3_out*722/10000;
            end // if ((row == 9'd0) && (col == 9'b0))
            else if (((row%mag) == 9'b0)  || ((col%mag) == 9'd0)) begin 
               address3_c = ((((row-(row%mag))/mag)*9'd128) + ((col-(col%mag))/mag)) - (13'd4096*13'd3);
               red_c = red3_out*2126/10000 + green3_out*7152/10000 + blue3_out*722/10000;
               blue_c = red3_out*2126/10000 + green3_out*7152/10000 + blue3_out*722/10000;
               green_c = red3_out*2126/10000 + green3_out*7152/10000 + blue3_out*722/10000;
            end 
         end 
         else begin 
            red_c = 4'b0000;
            green_c = 4'b0000;
            blue_c = 4'b0000;
         end
      end // S1:

     
   /*case(statex)
      S0: begin
         red_mult = red * (6'd27);
         green_mult = green * (6'd45);
         blue_mult = blue * (6'd4);
         statex_c = S1;

      end // S6:
      S1: begin
         luma_n_c = ((red_mult + green_mult + blue_mult) + 6'd64);
         statex_c = S2;
      end // S7:
      S2: begin 
         luma_c = luma_n / 7'd128; 
         statex_c = S3;
      end // S8:
      S3: begin
         red_c = luma;
         blue_c = luma;
         green_c = luma; 
      end // S9:
   endcase // statex*/

   /*if (SW_output[4]) begin
      luma_c = red*9'd2126/9'd10000 + green*9'd7152/9'd10000 + blue*9'd722/9'd10000;
      red_c = luma;
      blue_c = luma;
      green_c = luma;
   end
   else begin
      {red_c, blue_c, green_c} = pixel_buffer;
   end */

   if (SW_output[5]) begin
      blue_c = 4'b0000;
   end // if (SW[5])
    if (SW_output[6]) begin
      green_c = 4'b0000;
   end // if (SW[6])
    if (SW_output[7]) begin
      red_c = 4'b0000;
   end 
   
end

/*always @(*) begin
   luma_c = luma;
   luma_n_c = luma_n;
   case(statex)
      S0: begin
         red_mult = red * (6'd27);
         statex_c = S5;
      end // S4:
      S5: begin
         green_mult = green * (6'd45);
         statex_c = S6;
      end // S5:
      S6: begin 
         blue_mult = blue * (6'd4);
         statex_c = S7;
      end // S6:
      S7: begin
         luma_n_c = ((red_mult + green_mult + blue_mult) + 6'd64);
         statex_c = S8;
      end // S7:
      S8: begin 
         luma_c = luma_n / 7'd128; 
         statex_c = S9;
      end // S8:
      S9: begin
         red_c = luma;
         blue_c = luma;
         green_c = luma; 
      end // S9:
   endcase // statex
end*/

   


endmodule
